---
import Layout from '../../layouts/Layout.astro';
import { LOCALES } from "../../misc/i18n/locales.ts";
import { getRouteLangParam, useTranslations } from '../../misc/i18n/utils';
import { getArtworks, getAnimatics } from '../../misc/sanity/dataLoaders';

export function getStaticPaths() {
	return Object.keys(LOCALES)
				 .map(lang => ({
					params: { lang: getRouteLangParam(lang) },
					props: { currentLang: lang }
				 }));
}

const { currentLang } = Astro.props;
const translate = useTranslations(currentLang);

const artworks = await getArtworks(currentLang),
	animatics = await getAnimatics(currentLang);

const illustrationsLinkText = translate("illustrations"),
	animaticsLinkText = translate("animatics");
---

<Layout currentLang={currentLang}>
	<main>
		<header id="intro">
			<div id="intro-header">
				<button title={translate("closeBtn")} id="close-intro-btn" class="clear-btn">
					<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
						<path stroke="none" d="M0 0h24v24H0z" fill="none"/>
						<path d="M18 6l-12 12" /><path d="M6 6l12 12" />
					</svg>
				</button>
			</div>
			
			<div id="intro-body">
				<h1>oldkamelle</h1>
				<p>{translate("tagline")}</p>
				<div>
					<a href="mailto:oldkamelle@gmail.com" title={translate("contact")}>
						<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon">
							<path stroke="none" d="M0 0h24v24H0z" fill="none"/>
							<path d="M3 7a2 2 0 0 1 2 -2h14a2 2 0 0 1 2 2v10a2 2 0 0 1 -2 2h-14a2 2 0 0 1 -2 -2v-10z" /><path d="M3 7l9 6l9 -6" />
						</svg>
					</a>
					<a href="https://oldkamelle.tumblr.com" title="Tumblr">
						<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="icon">
							<path stroke="none" d="M0 0h24v24H0z" fill="none"/>
							<path d="M14 2a1 1 0 0 1 1 1v3h3a1 1 0 0 1 .993 .883l.007 .117v4a1 1 0 0 1 -1 1h-3v4h3a1 1 0 0 1 .993 .883l.007 .117v4a1 1 0 0 1 -1 1h-4a5 5 0 0 1 -5 -5v-5h-3a1 1 0 0 1 -.993 -.883l-.007 -.117v-4a1 1 0 0 1 1 -1h1a2 2 0 0 0 2 -2v-1a1 1 0 0 1 1 -1z" />
						</svg>
					</a>
					<a href="https://instagram.com/oldkamelle" title="Instagram">
						<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon">
							<path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M4 8a4 4 0 0 1 4 -4h8a4 4 0 0 1 4 4v8a4 4 0 0 1 -4 4h-8a4 4 0 0 1 -4 -4z" /><path d="M9 12a3 3 0 1 0 6 0a3 3 0 0 0 -6 0" />
							<path d="M16.5 7.5v.01" />
						</svg>                    
					</a>
					<a href="https://youtube.com/@oldkamelle" title="Youtube">
						<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="icon">
							<path stroke="none" d="M0 0h24v24H0z" fill="none"/>
							<path d="M18 3a5 5 0 0 1 5 5v8a5 5 0 0 1 -5 5h-12a5 5 0 0 1 -5 -5v-8a5 5 0 0 1 5 -5zm-9 6v6a1 1 0 0 0 1.514 .857l5 -3a1 1 0 0 0 0 -1.714l-5 -3a1 1 0 0 0 -1.514 .857z" />
						</svg>
					</a>
				</div>
			</div>
		</header>

		<section id="illustrations" title={illustrationsLinkText}>
			{artworks.map(work => (
				<a 
					class="spotlight" 
					data-title={work.title} 
					href={`https://res.cloudinary.com/oldkamelle/image/upload/q_auto:good/${work.urlId}`}>
					<img 
						alt={work.alt} 
						loading="lazy"
						src={`https://res.cloudinary.com/oldkamelle/image/upload/w_350/${work.urlId}`}/>
				</a>
			))}
		</section>

        <section id="animatics" title={animaticsLinkText}>
            <ol class="clear-list">
                {animatics.map(animatic => (
                    <li>
                        <picture>
                            <img
                                loading="lazy"
                                alt={animatic.previewPicAlt}
                                src={`https://res.cloudinary.com/oldkamelle/image/upload/w_400/q_auto:eco/${animatic.previewPicUrlId}`}
                                />
                        </picture>
                        <p><a href={animatic.url}>{animatic.title}</a></p>
                    </li>
                ))}
            </ol>
        </section>
	</main>
</Layout>

<style>
	#intro {
		z-index: 2;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
		background-color: rgb(from var(--dark-grey-color) r g b / 97%);
		border-radius: 10%;

		#intro-header {
			margin: 1em;
			text-align: end;
			opacity: 60%;
		}

		#intro-body {
			text-align: center;
			padding: 2em 3em;
			padding-top: 0;
		}

        h1 {
            margin: 0;
            font-size: xx-large;
        }

        p {
            margin-top: 0;
        }

        a {
            text-decoration: none;
        }

        #lang-option {
            text-align: end;
            margin-top: 2em;
        }
	}

	#illustrations {
		columns: 5;
		gap: 0;

		img {
			display: block;
			height: 100%;
            width: 100%;
            object-fit: cover;
		}
	}

	#animatics {
		display: none;
		padding: 2em;

		ol {
			margin: 0.5em auto 1em auto;
			display: flex;
			justify-content: space-evenly;
			flex-wrap: wrap;
			gap: 1em;

			li {
				width: 17em;

				picture {
					display: block;
				}

				img {
					width: 100%;
					height: 14em;
					object-fit: cover;

					border-radius: 0.5em;
				}

				p {
					margin: 0;
					margin-top: 0.3em;
				}
			}
    	}
	}

	@media (max-width: 1300px) {
		#illustrations {
			columns: 3;
		}
	}

	@media (max-width: 850px) {
		#intro {
			left: 0;
			right: 0;
			transform: translate(0, -50%);
			border-radius: 0;

			#intro-body {
				padding-left: 0.5em;
				padding-right: 0.5em;
			}
		}

		#illustrations {
			columns: 2;
		}
	}
</style>

<script define:vars={{illustrationsLinkText, animaticsLinkText}}>
	const introModal = document.getElementById('intro');
	const closeIntroBtn = document.getElementById('close-intro-btn');
	const aboutLink = document.getElementById('about');

	const displayShow = 'block', displayHide = 'none';

	if(closeIntroBtn && introModal && aboutLink) {
		closeIntroBtn.addEventListener('click', () => {
			introModal.style.display = displayHide;
			aboutLink.style.display = displayShow;
		});

		aboutLink.addEventListener('click', () => {
			introModal.style.display = displayShow;
			aboutLink.style.display = displayHide;
		});
	}

	const portfolioSwitchLink = document.getElementById('portfolio-switch');
	const illustrationsSection = document.getElementById('illustrations'),
		animaticsSection = document.getElementById('animatics');

	if(portfolioSwitchLink && illustrationsSection && animaticsSection) {
		portfolioSwitchLink.addEventListener('click', () => {
			if(animaticsSection.style.display === displayShow) {
				illustrationsSection.style.display = displayShow;
				animaticsSection.style.display = displayHide;

				portfolioSwitchLink.textContent = animaticsLinkText;
			}
			else {
				illustrationsSection.style.display = displayHide;
				animaticsSection.style.display = displayShow;

				portfolioSwitchLink.textContent = illustrationsLinkText;
			}
		});
	}
</script>